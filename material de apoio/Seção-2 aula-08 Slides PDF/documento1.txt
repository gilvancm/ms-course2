
Olá Carlos, tudo bem?

Se seguir as mesmas versões utilizadas no curso, você não deve ter problemas em finalizar o curso ok? Mas para título de curiosidade, segue as atualizações de depenências:

Anteriormente --> Hoje

Hystrix --> Resliience4J

Ribbon --> Spring Cloud Load Balancer

Zuul 1 --> Spring Cloud Gateway

Archaius 1 --> Spring Cloud Config

----------------------------------------------------------------
# Curso Microsserviços Java com Spring Boot e Spring Cloud
#### Nelio Alves 
https://github.com/acenelio/

https://github.com/acenelio/ms-course-configs

https://discord.gg/SbjpsFv
ajuda geral canal prof nelio
https://discord.com/channels/727228972068241480/727235890610569226

utilizar essa ferramenta https://www.diffchecker.com/diff para comparar seu código com o do GitHub da aula.

https://www.udemy.com/user/nelio-alves

https://youtube.com/devsuperior

https://instagram.com/devsuperior.ig

# Fase 1: Comunicação simples, Feign, Ribbon

### 1.1 Criar projeto hr-worker

### 1.2 Implementar projeto hr-worker

Script SQL
```sql
INSERT INTO tb_worker (name, daily_Income) VALUES ('Bob', 200.0);
INSERT INTO tb_worker (name, daily_Income) VALUES ('Maria', 300.0);
INSERT INTO tb_worker (name, daily_Income) VALUES ('Alex', 250.0);
```

application.properties
```
spring.application.name=hr-worker
server.port=8001

# Database configuration
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
```

obs o devtools automatiza a execução automatica dos projetos

### 1.3 Criar projeto hr-payroll

application.properties
```
spring.application.name=hr-payroll
server.port=8101
```

### 1.4 Implementar projeto hr-payroll (mock)

### 1.5 RestTemplate //maneira classica de um projeto se comunicar com o outro em webserver

### 1.6 Feign

### 1.7 Ribbon load balancing

Run configuration
```
-Dserver.port=8002
```
# Fase 2: Eureka, Hystrix, Zuul

-------------------------------------------------------------------
<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-hystrix -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
    <version>2.2.10.RELEASE</version>
</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>
				spring-cloud-starter-netflix-hystrix
			</artifactId>
		</dependency>


-----------------------------------------------------------------

### 2.1 Criar projeto hr-eureka-server

### 2.2 Configurar hr-eureka-server

Porta padrão: 8761

Acessar o dashboard no navegador: http://localhost:8761

### 2.3 Configurar clientes Eureka
todo client deve saber onde tá o servidor eureka para poder registra o client
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

Eliminar o Ribbon de hr-payroll:
- Dependência Maven
- Annotation no programa principal
- Configuração em application.properties

Atenção: aguardar um pouco depois de subir os microsserviços

### 2.4 Random port para hr-worker

```
server.port=${PORT:0}

eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
```

Atenção: deletar as configurações múltiplas de execução de hr-worker

### 2.5 Tolerância a falhas com Hystrix

### 2.6 Timeout de Hystrix e Ribbon

Atenção: testar antes sem a annotation do Hystrix

```
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
ribbon.ConnectTimeout=10000
ribbon.ReadTimeout=20000
```

Gateway é portal zuul é o nome
### 2.7 Criar projeto hr-zuul-server

### 2.8 Configurar hr-zuul-server
--------------------------------------------------------------------------------
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
    <version>2.2.0.RELEASE</version>
</dependency>

----------------------------------------------------------------------
Porta padrão: 8765

### 2.9 Random port para hr-payroll


### 2.10 Zuul timeout

Mesmo o timeout de Hystrix e Ribbon configurado em um microsserviço, se o Zuul não tiver seu timeout configurado, para ele será um problema de timeout. Então precisamos configurar o timeout no Zuul.

Se o timeout estiver configurado somente em Zuul, o Hystrix vai chamar o método alternativo no microsserviço específico.

# Fase 3: Configuração centralizada

### 3.1 Criar projeto hr-config-server

### 3.2 Configurar projeto hr-config-server

Quando um microsserviço é levantado, antes de se registrar no Eureka, ele busca as configurações no repositório central de configurações.

hr-worker.properties
```
test.config=My config value default profile
```
hr-worker-test.properties
```
test.config=My config value test profile
```
Teste:
```
http://localhost:8888/hr-worker/default
http://localhost:8888/hr-worker/test
```

### 3.3 hr-worker como cliente do servidor de configuração, profiles ativos

No arquivo bootstrap.properties configuramos somente o que for relacionado com o servidor de configuração, e também o profile do projeto.

Atenção: as configurações do bootstrap.properties tem prioridade sobre as do application.properties

### 3.4 Actuator para atualizar configurações em runtime

Atenção: colocar @RefreshScope em toda classe que possua algum acesso às configurações

### 3.5 Repositório Git privativo
Bom dia, como o git recentemente fez modificações em sua segurança via de mão no SSH criou a geração de token, contudo na sua configuração de var no ambiente no lugar do GITHUB_PASS vc coloca o token que vc fez no GIT que irá funcionar. Vale lembrar que na hora de gerar o token no site do GITHUB tem a opção de expiração e fica atento se caso você registrar um período seu projeto pode parar quando expirar. espero ter ajudado, abraços

https://docs.github.com/pt/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
ou
https://www.google.com/search?q=criar+token+github+de+acceso+personal&oq=criar+token+github+de+&aqs=chrome.6.69i57j33i160l5j33i22i29i30.26707j0j15&sourceid=chrome&ie=UTF-8#fpstate=ive&vld=cid:ce4cac47,vid:yTkb3VtNjBU


meu token gerado
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


No seu projeto, ao tentar dar o gitpush será exigido usuário e senha, coloque seu user em seguida o token gerado no passo a passo acima.

# git push
Username: your_username
Password: your_token
Para não precisar ficar digitando toda vez usuário e token, você pode digitar o comando abaixo para guardar as informações em cache

# git config --global credential.helper cache

Um abraço e bons estudos.
-----------------------------------------------------------------------------
Atenção: reinicie a IDE depois de adicionar as variáveis de ambiente

# Fase 4: autenticação e autorização

### 4.1 Criar projeto hr-user

### 4.2 Configurar projeto hr-user

### 4.3 Entidades User, Role e associação N-N

### 4.4 Carga inicial do banco de dados
```sql
INSERT INTO tb_user (name, email, password) VALUES ('Nina Brown', 'nina@gmail.com', '$2a$10$NYFZ/8WaQ3Qb6FCs.00jce4nxX9w7AkgWVsQCG6oUwTAcZqP9Flqu');
INSERT INTO tb_user (name, email, password) VALUES ('Leia Red', 'leia@gmail.com', '$2a$10$NYFZ/8WaQ3Qb6FCs.00jce4nxX9w7AkgWVsQCG6oUwTAcZqP9Flqu');

INSERT INTO tb_role (role_name) VALUES ('ROLE_OPERATOR');
INSERT INTO tb_role (role_name) VALUES ('ROLE_ADMIN');

INSERT INTO tb_user_role (user_id, role_id) VALUES (1, 1);
INSERT INTO tb_user_role (user_id, role_id) VALUES (2, 1);
INSERT INTO tb_user_role (user_id, role_id) VALUES (2, 2);
```

### 4.5 UserRepository, UserResource, Zuul config

### 4.6 Criar projeto hr-oauth

### 4.7 Configurar projeto hr-oauth

### 4.8 UserFeignClient

### 4.9 Login e geração do Token JWT
para teste o token jwt.io

Source -> Override -> configure(AuthenticationManagerBuilder)

Source -> Override -> authenticationManager()

Basic authorization = "Basic " + Base64.encode(client-id + ":" + client-secret)

### 4.10 Autorização de recursos pelo gateway Zuul
adiconar etsá dependencia

<dependency>

    <groupId>com.sun.xml.bind</groupId>

    <artifactId>jaxb-impl</artifactId>

    <version>3.0.2</version>

</dependency>


------------------------
### 4.11 Deixando o Postman top

Variáveis:
- api-gateway: http://localhost:8765
- config-host: http://localhost:8888
- client-name: CLIENT-NAME
- client-secret: CLIENT-SECRET
- username: leia@gmail.com
- password: 123456
- token: 
----
variavel de ambiente no postma no Enviroment(ambiente de execução)
{{api-gateway}}      {{token}}

{{config-host}} {{token}}
--
Script para atribuir token à variável de ambiente do Postman:
```js
if (responseCode.code >= 200 && responseCode.code < 300) {
    var json = JSON.parse(responseBody);
    postman.setEnvironmentVariable('token', json.access_token);
}
```
### 4.12 Configuração de segurança para o servidor de configuração
/*
o arquivo de configuração no resitory GitHub de configuração
para todo os microsservicos, vai ser de todo sistema e não especifico.
*/
application.properties
//coloca neste arquivo
oauth.client.name=myappname123
oauth.client.secret=myappsecret123
jwt.secret=MY-SECRET-KEY    //vc coloca a chave que vc achaar mais seguro -->MY-SECRET-KEY

### 4.13 Configurando CORS

Teste no navegador:
```js
fetch("http://localhost:8765/hr-worker/workers", {
  "headers": {
    "accept": "*/*",
    "accept-language": "en-US,en;q=0.9,pt-BR;q=0.8,pt;q=0.7",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "cross-site"
  },
  "referrer": "http://localhost:3000",
  "referrerPolicy": "no-referrer-when-downgrade",
  "body": null,
  "method": "GET",
  "mode": "cors",
  "credentials": "omit"
});
```
Seção 6 aula 47 doker isnatalação
Requisito : Docker
https://docs.docker.com

ele pode pedir para isntala o pacote Kernle uma aplicação do linux
Baixar o pacote de atualização do Kernel do linux

https://aka.ms/wsl2Kernel

https://learn.microsoft.com/pt-br/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package


Etapa 4 – Baixar o pacote de atualização do kernel do Linux
Baixar o pacote mais recente:

Pacote de atualização do kernel do Linux do WSL2 para computadores x64
-----------------------------------------------------------
Mudando a Branch no Git
mudar o Git branch main para Docker
sem alterar o que já tem do curso

criar uma Branch
git checkout -b docker
git status
git commit -m "DocKer Start"
git push -u origem docker    //devido ser o primeiro
